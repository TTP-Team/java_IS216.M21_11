CREATE TABLE KHACHHANG(
    MAKHACHHANG VARCHAR2(20) PRIMARY KEY,
    HOTEN VARCHAR2(60),
    DIACHI VARCHAR2(200),
    SODIENTHOAI VARCHAR2(20),
    EMAIL VARCHAR2(50),
    CCCD LONG,
    GIOITINH CHAR(5),
    NGAYSINH DATE,
    NGAYDANGKI DATE, 
    DOANHSO DOUBLE PRECISION 
);

CREATE TABLE DANHMUC(
    MADANHMUC VARCHAR2(20) PRIMARY KEY,
    TENDANHMUC VARCHAR2(50)
);
CREATE TABLE SANPHAM(
    MASANPHAM VARCHAR2(20) PRIMARY KEY,
    TENSANPHAM VARCHAR2(50),
    SOLUONG INT, 
    KICHTHUOC VARCHAR2(20), 
    HINHANH VARCHAR2(200),
    MOTA VARCHAR2(500),
    HANGSANXUAT VARCHAR2(50),
    MAUSAC VARCHAR2(20),
    DONGIASI DOUBLE PRECISION,
    DONGIALE DOUBLE PRECISION,
    MONTHETHAO VARCHAR2(20),
    MADANHMUC VARCHAR2(20), 
    SONGAYBAOHANH INT
);
CREATE TABLE TAIKHOAN(
    TENDANGNHAP VARCHAR2(20) PRIMARY KEY,
    MATKHAU VARCHAR2(40),
    PHANQUYEN VARCHAR2(20),
    TRANGTHAI VARCHAR2(40)
);
CREATE TABLE NHANVIEN(
    MANHANVIEN VARCHAR2(20) PRIMARY KEY,
    TENNHANVIEN VARCHAR2(50),
    DIACHI VARCHAR2(200),
    SODIENTHOAI VARCHAR2(20),
    EMAIL VARCHAR2(100),
    CCCD LONG,
    GIOITINH CHAR(5),
    NGAYSINH DATE,
    NGAYVAOLAM DATE, 
    CHUCVU VARCHAR2(40),
    LUONG DOUBLE PRECISION
);

CREATE TABLE SUKIEN(
    MASUKIEN VARCHAR2(20) PRIMARY KEY,
    TENSUKIEN VARCHAR2(100),
    PHANTRAMGIAMGIA FLOAT,
    NGAYBATDAU DATE,
    NGAYKETTHUC DATE
);

CREATE TABLE HOADON(
    MAHOADON VARCHAR2(20) PRIMARY KEY,
    MAKHACHHANG VARCHAR2(20),
    MANHANVIEN VARCHAR2(20),
    MASUKIEN VARCHAR2(20), 
    NGAYHOADON DATE,    
    TRIGIA DOUBLE PRECISION 
);
CREATE TABLE CHITIETHOADON(
    MAHOADON VARCHAR2(20),  
    MASANPHAM VARCHAR2(20), 
    SOLUONG INT,
    
    CONSTRAINT PK_CTHD PRIMARY KEY(MAHOADON,MASANPHAM)
);
CREATE TABLE PHIEUNHAP(
    MAPHIEUNHAP VARCHAR2(20) PRIMARY KEY,
    NGAYNHAP DATE,
    MANHANVIEN VARCHAR2(20) ,
    TRIGIA DOUBLE PRECISION
);
CREATE TABLE CHITIETPHIEUNHAP(
    MAPHIEUNHAP VARCHAR2(20), 
    MASANPHAM VARCHAR2(20),
    DONGIANHAP DOUBLE PRECISION,
    SOLUONG INT,

    CONSTRAINT PK_CTPN PRIMARY KEY(MAPHIEUNHAP,MASANPHAM) 
);
CREATE TABLE CHAMCONG(
    MANHANVIEN VARCHAR2(20),
    NGAYLAMVIEC DATE,
    CONSTRAINT PK_CHAMCONG PRIMARY KEY(MANHANVIEN,NGAYLAMVIEC) 
);

ALTER TABLE SANPHAM ADD CONSTRAINT FK_SANPHAM FOREIGN KEY(MADANHMUC) REFERENCES DANHMUC(MADANHMUC);
ALTER TABLE HOADON ADD CONSTRAINT FK01_HOADON FOREIGN KEY(MAKHACHHANG) REFERENCES KHACHHANG(MAKHACHHANG);
ALTER TABLE HOADON ADD CONSTRAINT FK02_HOADON FOREIGN KEY(MANHANVIEN) REFERENCES NHANVIEN(MANHANVIEN);
ALTER TABLE HOADON ADD CONSTRAINT FK03_HOADON FOREIGN KEY(MASUKIEN) REFERENCES SUKIEN(MASUKIEN);
ALTER TABLE TAIKHOAN ADD CONSTRAINT FK_TAIKHOAN FOREIGN KEY(TENDANGNHAP) REFERENCES NHANVIEN(MANHANVIEN);
ALTER TABLE CHITIETHOADON ADD CONSTRAINT FK01_CTHD FOREIGN KEY(MAHOADON) REFERENCES HOADON(MAHOADON);
ALTER TABLE CHITIETHOADON ADD CONSTRAINT FK02_CTHD FOREIGN KEY(MASANPHAM) REFERENCES SANPHAM(MASANPHAM);
ALTER TABLE PHIEUNHAP ADD CONSTRAINT FK_PHIEUNHAP FOREIGN KEY(MANHANVIEN) REFERENCES NHANVIEN(MANHANVIEN);
ALTER TABLE CHITIETPHIEUNHAP ADD CONSTRAINT FK01_CTPN FOREIGN KEY(MASANPHAM) REFERENCES SANPHAM(MASANPHAM);
ALTER TABLE CHITIETPHIEUNHAP ADD CONSTRAINT FK02_MAPHIEUNHAP FOREIGN KEY(MAPHIEUNHAP) REFERENCES PHIEUNHAP(MAPHIEUNHAP);
ALTER TABLE CHAMCONG ADD CONSTRAINT FK_CHAMCONG FOREIGN KEY(MANHANVIEN) REFERENCES NHANVIEN(MANHANVIEN);

-------------------------------------------------------------SEQUENCE------------------------------------------------------------------
CREATE SEQUENCE seq_SanPham
INCREMENT BY 1
START WITH 40
/
CREATE SEQUENCE seq_HoaDon
INCREMENT BY 1
START WITH 40
/
CREATE SEQUENCE seq_PhieuNhap
INCREMENT BY 1
START WITH 40
/
CREATE SEQUENCE seq_KhachHang
INCREMENT BY 1
START WITH 40
/
CREATE SEQUENCE seq_NhanVien
INCREMENT BY 1
START WITH 40
/
CREATE SEQUENCE seq_DanhMuc
INCREMENT BY 1
START WITH 40
/
CREATE SEQUENCE seq_SuKien
INCREMENT BY 1
START WITH 40
/


-------------------------------------------------------------PROCEDURE------------------------------------------------------------------
----------------------------DANHMUC--------------------------
CREATE OR REPLACE PROCEDURE getAllDanhMuc(o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT * FROM DANHMUC;
END;
/
CREATE OR REPLACE PROCEDURE getDanhMucById(maDM IN DANHMUC.MADANHMUC%TYPE, o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT * FROM DANHMUC WHERE MADANHMUC LIKE maDM || '%';
END;
/
CREATE OR REPLACE PROCEDURE getDanhMucByTen(tenDM IN DANHMUC.MADANHMUC%TYPE, o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT * FROM DANHMUC WHERE TENDANHMUC LIKE tenDM || '%';
END;
/


CREATE OR REPLACE PROCEDURE ThemDanhMuc(TenDM IN DANHMUC.TENDANHMUC%TYPE)
AS
BEGIN
    INSERT INTO DANHMUC VALUES('DM'|| seq_DanhMuc.nextval, TenDM);
    Commit;
END;
/
CREATE OR REPLACE PROCEDURE XoaDanhMuc(MaDM IN DANHMUC.MADANHMUC%TYPE)
AS
BEGIN
    DELETE FROM DANHMUC WHERE MADANHMUC = MaDM;
    Commit;
END;
/
CREATE OR REPLACE PROCEDURE SuaDanhMuc(MaDM IN DANHMUC.MADANHMUC%TYPE, TenDM IN DANHMUC.TENDANHMUC%TYPE)
AS
BEGIN
    UPDATE DANHMUC
    SET TENDANHMUC = TenDM
    WHERE MADANHMUC = MaDM;
    Commit;
END;
/
----------------------------SANPHAM-----------------------------------
CREATE OR REPLACE PROCEDURE getAllSanPham(o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT * FROM SANPHAM;
END;
/
CREATE OR REPLACE PROCEDURE getSanPhamById(maSP IN SANPHAM.MASANPHAM%TYPE, o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT * FROM SANPHAM WHERE MASANPHAM LIKE maSP || '%';
END;
/
CREATE OR REPLACE PROCEDURE getSanPhamByTen(tenSP IN SANPHAM.TENSANPHAM%TYPE, o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT * FROM SANPHAM WHERE TENSANPHAM LIKE '%' || tenSP || '%';
END;
/
CREATE OR REPLACE PROCEDURE getSanPhamByMauSac(mSac IN SANPHAM.MAUSAC%TYPE, o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT * FROM SANPHAM WHERE MAUSAC LIKE mSac || '%';
END;
/
CREATE OR REPLACE PROCEDURE getSanPhamByHangSanXuat(hsx IN SANPHAM.HANGSANXUAT%TYPE, o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT * FROM SANPHAM WHERE HANGSANXUAT LIKE hsx || '%';
END;
/
CREATE OR REPLACE PROCEDURE getSanPhamByMonTheThao(mtt IN SANPHAM.MONTHETHAO%TYPE, o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT * FROM SANPHAM WHERE MONTHETHAO LIKE mtt || '%';
END;
/
CREATE OR REPLACE PROCEDURE getSanPhamByMaDanhMuc(maDM IN SANPHAM.MADANHMUC%TYPE, o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT * FROM SANPHAM WHERE MADANHMUC LIKE maDM || '%';
END;
/
CREATE OR REPLACE PROCEDURE ThemSanPham(TenSP IN SANPHAM.TENSANPHAM%TYPE, 
kt IN SANPHAM.KICHTHUOC%TYPE, anh IN SANPHAM.HINHANH%TYPE, mt IN SANPHAM.MOTA%TYPE, hsx IN SANPHAM.HANGSANXUAT%TYPE, mau IN SANPHAM.MAUSAC%TYPE,
dgsi IN SANPHAM.DONGIASI%TYPE, dgle IN SANPHAM.DONGIALE%TYPE, montt IN SANPHAM.MONTHETHAO%TYPE, madm IN SANPHAM.MADANHMUC%TYPE, songaybh IN SANPHAM.SONGAYBAOHANH%TYPE)
AS
BEGIN
    INSERT INTO SANPHAM VALUES('SP'|| seq_SanPham.nextval,  TenSP, 0, kt, anh, mt, hsx, mau, dgsi, dgle, montt, madm, songaybh);
    Commit;
END;
/
CREATE OR REPLACE PROCEDURE XoaSanPham(MaSP IN SANPHAM.MASANPHAM%TYPE)
AS
BEGIN
    DELETE FROM SANPHAM WHERE MASANPHAM = MaSP;
    Commit;
END;
/
CREATE OR REPLACE PROCEDURE SuaSanPham(MaSP IN SANPHAM.MASANPHAM%TYPE, TenSP IN SANPHAM.TENSANPHAM%TYPE, sl IN SANPHAM.SOLUONG%TYPE, 
kt IN SANPHAM.KICHTHUOC%TYPE, anh IN SANPHAM.HINHANH%TYPE, mt IN SANPHAM.MOTA%TYPE, hsx IN SANPHAM.HANGSANXUAT%TYPE, mau IN SANPHAM.MAUSAC%TYPE,
dgsi IN SANPHAM.DONGIASI%TYPE, dgle IN SANPHAM.DONGIALE%TYPE, montt IN SANPHAM.MONTHETHAO%TYPE, madm IN SANPHAM.MADANHMUC%TYPE, songaybh IN SANPHAM.SONGAYBAOHANH%TYPE)
AS 
BEGIN
    UPDATE SANPHAM 
    SET TENSANPHAM = TenSP, SOLUONG = sl, KICHTHUOC = kt, HINHANH = anh, MOTA = mt, HANGSANXUAT = hsx, MAUSAC = mau, DONGIASI = dgsi, DONGIALE = dgle, MONTHETHAO = montt, MADANHMUC = madm, SONGAYBAOHANH = songaybh
    WHERE MASANPHAM = MaSP;
    Commit;
END;
/
---------CHAMCONG
create or replace PROCEDURE getAllChamCong(o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT *  FROM CHAMCONG;
END;
/
create or replace PROCEDURE getChamCongByMaNhanVien(maNV CHAMCONG.MANHANVIEN%TYPE, o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT *  FROM CHAMCONG WHERE MANHANVIEN = MaNV ORDER BY MANHANVIEN;
END;
/
create or replace PROCEDURE getChamCongByNgayLamViec(ngLV CHAMCONG.NGAYLAMVIEC%TYPE, o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT *  FROM CHAMCONG WHERE TO_CHAR(NGAYLAMVIEC, 'YYYYMMDD') = TO_CHAR(ngLV, 'YYYYMMDD');
END;
/
create or replace PROCEDURE getChamCongByTenNhanVien(tenNV NHANVIEN.TENNHANVIEN%TYPE, o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT c.MANHANVIEN, NGAYLAMVIEC FROM CHAMCONG c JOIN NHANVIEN n ON c.MANHANVIEN = n.MANHANVIEN WHERE TENNHANVIEN LIKE '%' || tenNV || '%' ORDER BY MANHANVIEN;
END;
/
create or replace PROCEDURE chamCongNgay(maNV CHAMCONG.MANHANVIEN%TYPE)
AS
    flag INT := 0;
    ngLV DATE := CURRENT_DATE;
BEGIN
    FOR ccong IN (SELECT * FROM CHAMCONG) LOOP
        IF(maNV = ccong.MANHANVIEN AND TRUNC(ccong.NGAYLAMVIEC) = TRUNC(ngLV))THEN
            flag := 1;
        END IF;
    END LOOP;
    IF(flag = 0)THEN
        INSERT INTO CHAMCONG VALUES(maNV, CURRENT_DATE);  
        Commit;
    END IF;
END;
/

---------HOADON----------------------------------
CREATE OR REPLACE PROCEDURE getAllHoaDon(o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT * FROM HOADON;
END;
/
CREATE OR REPLACE PROCEDURE getHoaDonById(maHD IN HOADON.MAHOADON%TYPE, o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT * FROM HOADON WHERE MAHOADON LIKE maHD || '%';
END;
/
CREATE OR REPLACE PROCEDURE getHoaDonByMaNhanVien(maNV IN HOADON.MANHANVIEN%TYPE, o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT * FROM HOADON WHERE MANHANVIEN LIKE maNV||'%';
END;
/
CREATE OR REPLACE PROCEDURE getHoaDonByNgayHoaDon(ngHD IN HOADON.NGAYHOADON%TYPE, o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT * FROM HOADON WHERE TRUNC(NGAYHOADON) = TRUNC(ngHD);
END;
/
CREATE OR REPLACE PROCEDURE getHoaDonByMaKhachHang(maKH IN HOADON.MAKHACHHANG%TYPE, o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT * FROM HOADON WHERE MAKHACHHANG LIKE maKH||'%' ;
END;
/
create or replace PROCEDURE ThemHoaDon(MaHD HOADON.MAHOADON%TYPE, MaKH HOADON.MAKHACHHANG%TYPE, MaNV HOADON.MANHANVIEN%TYPE, MaSK HOADON.MASUKIEN%TYPE,
NgayHD HOADON.NGAYHOADON%TYPE)
AS
BEGIN
    INSERT INTO HOADON VALUES(MaHD, MaKH, MaNV, MaSK, NgayHD, 0);
    commit;
END;
/
create or replace PROCEDURE XoaHoaDon(MaHD HOADON.MAHOADON%TYPE)
AS
BEGIN
    DELETE FROM CHITIETHOADON WHERE MAHOADON = MaHD;
    DELETE FROM HOADON WHERE MAHOADON = MaHD;
    commit;
END;
/
create or replace PROCEDURE getAllDoanhThuTheoNgay(ngBD HOADON.NGAYHOADON%TYPE, ngKT HOADON.NGAYHOADON%TYPE, o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT NGAYHOADON, SUM(TRIGIA) AS DOANHTHU FROM HOADON WHERE NGAYHOADON >= ngBD AND NGAYHOADON <= ngKT GROUP BY NGAYHOADON ORDER BY NGAYHOADON ; 
END;

/
create or replace PROCEDURE getSoSanPhamBanRa(ngBD HOADON.NGAYHOADON%TYPE, ngKT HOADON.NGAYHOADON%TYPE, o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT TENSANPHAM, SUM(c.SOLUONG) AS SLUONG
      FROM (HOADON h JOIN CHITIETHOADON c ON h.MAHOADON = c.MAHOADON) JOIN SANPHAM s ON c.MASANPHAM = s.MASANPHAM  
      WHERE NGAYHOADON >= ngBD AND NGAYHOADON <= ngKT
      GROUP BY TENSANPHAM ; 
END;
/
---------CHITIETHOADON
CREATE OR REPLACE PROCEDURE getAllChiTietHoaDon(maHD CHITIETHOADON.MAHOADON%TYPE, o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT *  FROM CHITIETHOADON WHERE MAHOADON = maHD;
END;
/
create or replace PROCEDURE ThemChiTietHoaDon(MaHD CHITIETHOADON.MAHOADON%TYPE, MaSP CHITIETHOADON.MASANPHAM%TYPE, sl CHITIETHOADON.SOLUONG%TYPE)
AS
BEGIN
    INSERT INTO CHITIETHOADON VALUES(MaHD, MaSP, sl);
    commit;
END;
/
---------PHIEUNHAP
CREATE OR REPLACE PROCEDURE getAllPhieuNhap(o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT *  FROM PHIEUNHAP;
END;
/
CREATE OR REPLACE PROCEDURE getPhieuNhapById(maPN PHIEUNHAP.MAPHIEUNHAP%TYPE, o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT *  FROM PHIEUNHAP WHERE MAPHIEUNHAP = maPN;
END;
/
CREATE OR REPLACE PROCEDURE getPhieuNhapByMaNhanVien(maNV PHIEUNHAP.MANHANVIEN%TYPE, o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT *  FROM PHIEUNHAP WHERE MANHANVIEN = maNV;
END;
/
create or replace PROCEDURE getPhieuNhapByNgay(nNhap PHIEUNHAP.NGAYNHAP%TYPE, o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT *  FROM PHIEUNHAP WHERE TO_CHAR(NGAYNHAP, 'YYYYMMDD') = TO_CHAR(nNhap, 'YYYYMMDD');
END;
/
create or replace PROCEDURE ThemPhieuNhap(MaPN PHIEUNHAP.MAPHIEUNHAP%TYPE,ngNhap PHIEUNHAP.NGAYNHAP%TYPE, MaNV PHIEUNHAP.MANHANVIEN%TYPE)
AS
BEGIN
    INSERT INTO PHIEUNHAP VALUES(MaPN, ngNhap, MaNV, 0);
END;
/
create or replace PROCEDURE getSoSanPhamNhapVao(ngBD PHIEUNHAP.NGAYNHAP%TYPE, ngKT PHIEUNHAP.NGAYNHAP%TYPE, o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT TENSANPHAM, SUM(c.SOLUONG) AS SLUONG
      FROM (PHIEUNHAP p JOIN CHITIETPHIEUNHAP c ON p.MAPHIEUNHAP = c.MAPHIEUNHAP) JOIN SANPHAM s ON c.MASANPHAM = s.MASANPHAM  
      WHERE NGAYNHAP >= ngBD AND NGAYNHAP <= ngKT
      GROUP BY TENSANPHAM ; 
END;
/
CREATE OR REPLACE PROCEDURE XoaPhieuNhap(MaPN PHIEUNHAP.MAPHIEUNHAP%TYPE)
AS
BEGIN
    DELETE FROM CHITIETPHIEUNHAP WHERE MAPHIEUNHAP = MaPN;
    DELETE FROM PHIEUNHAP WHERE MAPHIEUNHAP = MaPN;
END;
/
---------CHITIETPHIEUNHAP
CREATE OR REPLACE PROCEDURE getAllChiTietPhieuNhap(maPN CHITIETPHIEUNHAP.MAPHIEUNHAP%TYPE, o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT *  FROM CHITIETPHIEUNHAP WHERE MAPHIEUNHAP = maPN;
END;
/
create or replace PROCEDURE ThemChiTietPhieuNhap(MaPN PHIEUNHAP.MAPHIEUNHAP%TYPE, MaSP CHITIETPHIEUNHAP.MASANPHAM%TYPE, donGia CHITIETPHIEUNHAP.DONGIANHAP%TYPE, sl CHITIETPHIEUNHAP.SOLUONG%TYPE)
AS
BEGIN
    INSERT INTO CHITIETPHIEUNHAP VALUES(MaPN, MaSP, donGia, sl);
END;
/
---------KHACHHANG
CREATE OR REPLACE PROCEDURE getAllKhachHang(o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT * FROM KHACHHANG;
END;
/
CREATE OR REPLACE PROCEDURE getKhachHangById(maKH IN KHACHHANG.MAKHACHHANG%TYPE, o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT * FROM KHACHHANG WHERE MAKHACHHANG LIKE maKH || '%';
END;
/

CREATE OR REPLACE PROCEDURE getKhachHangByTen(tenKH IN KHACHHANG.MAKHACHHANG%TYPE, o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT * FROM KHACHHANG WHERE HOTEN LIKE '%'||tenKH||'%';
END;
/

CREATE OR REPLACE PROCEDURE getKhachHangByGioiTinh(gt IN KHACHHANG.GIOITINH%TYPE, o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT * FROM KHACHHANG WHERE GIOITINH = gt;
END;
/
CREATE OR REPLACE PROCEDURE ThemKhachHang(TenKH IN KHACHHANG.HOTEN%TYPE, DChi IN KHACHHANG.DIACHI%TYPE,
sdt IN KHACHHANG.SODIENTHOAI%TYPE, mail IN KHACHHANG.EMAIL%TYPE, cc IN KHACHHANG.CCCD%TYPE, gt IN KHACHHANG.GIOITINH%TYPE, ngsinh IN KHACHHANG.NGAYSINH%TYPE,ngdk IN KHACHHANG.NGAYDANGKI%TYPE)
AS 
BEGIN
    INSERT INTO KHACHHANG VALUES('KH'|| seq_KhachHang.nextval, TenKH, DChi, sdt, mail, cc, gt, ngsinh, ngdk, 0);
    commit;
END;
/
CREATE OR REPLACE PROCEDURE XoaKhachHang(MaKH IN KHACHHANG.MAKHACHHANG%TYPE)
AS
BEGIN
    DELETE FROM KHACHHANG WHERE MAKHACHHANG = MaKH;
    commit;
END;
/
CREATE OR REPLACE PROCEDURE SuaKhachHang(MaKH IN KHACHHANG.MAKHACHHANG%TYPE, TenKH IN KHACHHANG.HOTEN%TYPE, DChi IN KHACHHANG.DIACHI%TYPE,
sdt IN KHACHHANG.SODIENTHOAI%TYPE, mail IN KHACHHANG.EMAIL%TYPE, cc IN KHACHHANG.CCCD%TYPE, gt IN KHACHHANG.GIOITINH%TYPE, ngsinh IN KHACHHANG.NGAYSINH%TYPE, ngdk IN KHACHHANG.NGAYDANGKI%TYPE, dso IN KHACHHANG.DOANHSO%TYPE)
AS 
BEGIN
    UPDATE KHACHHANG
    SET HOTEN = TenKH, DIACHI = DChi, SODIENTHOAI = sdt, EMAIL = mail, CCCD = cc, GIOITINH = gt, NGAYSINH = ngsinh, NGAYDANGKI = ngdk, DOANHSO = dso
    WHERE MAKHACHHANG = MaKH;
    commit;
END;
/
---------NHANVIEN
CREATE OR REPLACE PROCEDURE getAllNhanVien(o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT * FROM NHANVIEN;
END;
/
CREATE OR REPLACE PROCEDURE getNhanVienById(maNV IN NHANVIEN.MANHANVIEN%TYPE, o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT * FROM NHANVIEN WHERE MANHANVIEN LIKE maNV || '%';
END;
/
CREATE OR REPLACE PROCEDURE getNhanVienByTen(tenNV IN NHANVIEN.TENNHANVIEN%TYPE, o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT * FROM NHANVIEN WHERE TENNHANVIEN LIKE '%'||tenNV||'%';
END;
/
CREATE OR REPLACE PROCEDURE getNhanVienByGioiTinh(gt IN NHANVIEN.GIOITINH%TYPE, o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT * FROM NHANVIEN WHERE GIOITINH = gt;
END;
/
CREATE OR REPLACE PROCEDURE getNhanVienByChucVu(cvu IN NHANVIEN.CHUCVU%TYPE, o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT * FROM NHANVIEN WHERE CHUCVU = cvu;
END;
/

create or replace PROCEDURE ThemNhanVien(TenNV IN NHANVIEN.TENNHANVIEN%TYPE, DChi IN NHANVIEN.DIACHI%TYPE,
sdt IN NHANVIEN.SODIENTHOAI%TYPE, mail IN NHANVIEN.EMAIL%TYPE, cc IN NHANVIEN.CCCD%TYPE, gt IN NHANVIEN.GIOITINH%TYPE, ngsinh IN NHANVIEN.NGAYSINH%TYPE, ngvl IN NHANVIEN.NGAYVAOLAM%TYPE, cv IN NHANVIEN.CHUCVU%TYPE)
AS 
    l NHANVIEN.LUONG%TYPE;
BEGIN
    IF(LOWER(cv) = 'quản lý')THEN
            l := 350000.0;
        ELSIF(LOWER(cv) = 'nhân viên bán hàng') THEN
            l := 200000.0;
        ELSIF(LOWER(cv) = 'nhân viên kho') THEN
            l := 150000.0;
        END IF;
    INSERT INTO NHANVIEN VALUES('NV'|| seq_NhanVien.nextval, TenNV, DChi, sdt, mail, cc, gt, ngsinh, ngvl, cv, l);
    
    commit;
END;
/
create or replace PROCEDURE XoaNhanVien(MaNV IN NHANVIEN.MANHANVIEN%TYPE)
AS
BEGIN
    DELETE FROM NHANVIEN WHERE MANHANVIEN = MaNV;
    commit;
END;
/
create or replace PROCEDURE SuaNhanVien(MaNV IN NHANVIEN.MANHANVIEN%TYPE, TenNV IN NHANVIEN.TENNHANVIEN%TYPE, DChi IN NHANVIEN.DIACHI%TYPE,
sdt IN NHANVIEN.SODIENTHOAI%TYPE, mail IN NHANVIEN.EMAIL%TYPE, cc IN NHANVIEN.CCCD%TYPE, gt IN NHANVIEN.GIOITINH%TYPE, ngsinh IN NHANVIEN.NGAYSINH%TYPE, ngvl IN NHANVIEN.NGAYVAOLAM%TYPE, cv IN NHANVIEN.CHUCVU%TYPE)
AS 
    l NHANVIEN.LUONG%TYPE;
BEGIN
        IF(LOWER(cv) = 'quản lý')THEN
            l := 350000;
        ELSIF(LOWER(cv) = 'nhân viên bán hàng') THEN
            l := 200000;
        ELSIF(LOWER(cv) = 'nhân viên kho') THEN
            l := 150000;
        END IF;
    UPDATE NHANVIEN
    SET TENNHANVIEN = TenNV, DIACHI = DChi, SODIENTHOAI = sdt, EMAIL = mail, CCCD = cc, GIOITINH = gt, NGAYSINH = ngsinh, NGAYVAOLAM = ngvl, CHUCVU = cv, LUONG = l
    WHERE MANHANVIEN = MaNV;
    commit;
END;

create or replace PROCEDURE getDanhSachLuong(thang INT, nam INT, o_c_dbuser OUT SYS_REFCURSOR)
AS   
BEGIN       
      OPEN o_c_dbuser FOR
      SELECT DISTINCT c.MANHANVIEN,COUNT(NGAYLAMVIEC) AS NLV, COUNT(NGAYLAMVIEC)* LUONG AS TIENLUONG
      FROM CHAMCONG c JOIN NHANVIEN n ON c.MANHANVIEN = n.MANHANVIEN
      WHERE EXTRACT (MONTH FROM NGAYLAMVIEC ) = thang AND EXTRACT (YEAR FROM NGAYLAMVIEC ) = nam
      GROUP BY c.MANHANVIEN, LUONG;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('no data');
END;
--------------SUKIEN
CREATE OR REPLACE PROCEDURE getAllSuKien(o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT * FROM SUKIEN;
END;
/
CREATE OR REPLACE PROCEDURE getSuKienById(maSK IN SUKIEN.MASUKIEN%TYPE, o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT * FROM SUKIEN WHERE MASUKIEN LIKE maSK || '%';
END;
/
CREATE OR REPLACE PROCEDURE getSuKienByTen(tenSK IN SUKIEN.TENSUKIEN%TYPE, o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT * FROM SUKIEN WHERE TENSUKIEN LIKE '%' || tenSK || '%';
END;
/
CREATE OR REPLACE PROCEDURE getSuKienByNgay(ngaySK IN SUKIEN.NGAYBATDAU%TYPE, o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT * FROM SUKIEN WHERE ngaySK <= NGAYKETTHUC AND ngaySK >= NGAYBATDAU;
END;
/
create or replace PROCEDURE ThemSuKien(TenSK SUKIEN.TENSUKIEN%TYPE, phanTram SUKIEN.PHANTRAMGIAMGIA%TYPE, ngaybd SUKIEN.NGAYBATDAU%TYPE, ngaykt SUKIEN.NGAYKETTHUC%TYPE)
AS
BEGIN
    INSERT INTO SUKIEN VALUES('SK'|| seq_SuKien.nextval, TenSK, phanTram, ngaybd, ngaykt);
    commit;
END;
/
create or replace PROCEDURE XoaSuKien(MaSK SUKIEN.MASUKIEN%TYPE)
AS
BEGIN
    DELETE FROM SUKIEN WHERE MASUKIEN = MaSK;
    commit;
END;
/
create or replace PROCEDURE SuaSuKien(MaSK SUKIEN.MASUKIEN%TYPE, TenSK SUKIEN.TENSUKIEN%TYPE, phanTram SUKIEN.PHANTRAMGIAMGIA%TYPE, ngaybd SUKIEN.NGAYBATDAU%TYPE, ngaykt SUKIEN.NGAYKETTHUC%TYPE)
AS
BEGIN
    UPDATE SUKIEN
    SET TENSUKIEN = TenSK, PHANTRAMGIAMGIA = phanTram, NGAYBATDAU = ngaybd, NGAYKETTHUC = ngaykt
    WHERE MASUKIEN = MaSK;
    commit;
END;
---------------------TAIKHOAN
CREATE OR REPLACE PROCEDURE getAllTaiKhoan(o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT TENDANGNHAP, TRANGTHAI, PHANQUYEN FROM TAIKHOAN;
END;
/
CREATE OR REPLACE PROCEDURE getTaiKhoanByTenDangNhap(tenDN TAIKHOAN.TENDANGNHAP%TYPE, o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT TENDANGNHAP, TRANGTHAI, PHANQUYEN FROM TAIKHOAN WHERE TENDANGNHAP LIKE tenDN || '%';
END;
/
CREATE OR REPLACE PROCEDURE getTaiKhoanByTrangThai(tt TAIKHOAN.TRANGTHAI%TYPE, o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT TENDANGNHAP, TRANGTHAI, PHANQUYEN FROM TAIKHOAN WHERE TRANGTHAI = tt;
END;
/
CREATE OR REPLACE PROCEDURE getTaiKhoanByPhanQuyen(pq TAIKHOAN.PHANQUYEN%TYPE, o_c_dbuser OUT SYS_REFCURSOR)
AS
BEGIN
      OPEN o_c_dbuser FOR
      SELECT TENDANGNHAP, TRANGTHAI, PHANQUYEN FROM TAIKHOAN WHERE PHANQUYEN = pq;
END;
/
CREATE OR REPLACE PROCEDURE laMoiMatKhau(tenDN TAIKHOAN.TENDANGNHAP%TYPE)
AS
BEGIN
      UPDATE TAIKHOAN SET MATKHAU = tenDN || 123 WHERE TENDANGNHAP = tenDN;
END;
/

create or replace PROCEDURE ThemTaiKhoan(tendn TAIKHOAN.TENDANGNHAP%TYPE, pq TAIKHOAN.PHANQUYEN%TYPE)
AS
    mk TAIKHOAN.MATKHAU%TYPE :=  tendn || '123';  
    tt TAIKHOAN.TRANGTHAI%TYPE := 'Hoạt Động';
BEGIN
    INSERT INTO TAIKHOAN VALUES(tendn, mk, pq, tt);
END;
/
create or replace PROCEDURE XoaTaiKhoan(tendn TAIKHOAN.TENDANGNHAP%TYPE)
AS
BEGIN
    DELETE FROM TAIKHOAN WHERE TENDANGNHAP = tendn;
END;
/
create or replace PROCEDURE SuaTrangThaiTaiKhoan(tendn TAIKHOAN.TENDANGNHAP%TYPE, tt TAIKHOAN.TRANGTHAI%TYPE)
AS
BEGIN
    UPDATE TAIKHOAN
    SET TRANGTHAI = tt
    WHERE TENDANGNHAP = tendn;
END;
/
create or replace PROCEDURE lamMoiMatKhau(tenDN TAIKHOAN.TENDANGNHAP%TYPE)
AS
BEGIN
      UPDATE TAIKHOAN SET MATKHAU = tenDN || '123' WHERE TENDANGNHAP = tenDN;
END;
/
create or replace PROCEDURE kiemTraTaiKhoan(tdn IN TAIKHOAN.TENDANGNHAP%TYPE, mk IN TAIKHOAN.MATKHAU%TYPE, tt OUT INT, pq OUT TAIKHOAN.PHANQUYEN%TYPE)
AS
    tk TAIKHOAN%ROWTYPE;
BEGIN
    IF(EXTRACT(day FROM SYSDATE) = 1)THEN
        UPDATE NHANVIEN SET LUONG = 0;
    END IF;

    SELECT * INTO tk
    FROM TAIKHOAN
    WHERE TENDANGNHAP = tdn AND MATKHAU = mk;
    IF(tk.TRANGTHAI = 'Hoạt Động') THEN
        tt := 1;
        chamCongNgay(tdn);
    ELSE
        tt := -1;
    END IF;
    pq := tk.PHANQUYEN;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tt := 0;  
END;
/
create or replace PROCEDURE SuaPhanQuyenTaiKhoan(tendn TAIKHOAN.TENDANGNHAP%TYPE, pq TAIKHOAN.PHANQUYEN%TYPE)
AS
BEGIN
    UPDATE TAIKHOAN SET PHANQUYEN = pq  WHERE TENDANGNHAP = tendn;
END;
/
create or replace PROCEDURE doiMatKhau(tenDN TAIKHOAN.TENDANGNHAP%TYPE, matKhauMoi TAIKHOAN.MATKHAU%TYPE)
AS
BEGIN
    UPDATE TAIKHOAN SET MATKHAU = matKhauMoi WHERE TENDANGNHAP= tenDN;
END;
/

create or replace PROCEDURE getLoiNhuanThang(thang INT, nam INT, l OUT DOUBLE PRECISION,hd OUT DOUBLE PRECISION, pn OUT DOUBLE PRECISION, loiNhuan OUT DOUBLE PRECISION)
AS   
BEGIN       
      SELECT SUM(COUNT(NGAYLAMVIEC)* LUONG) INTO l
      FROM CHAMCONG c JOIN NHANVIEN n ON c.MANHANVIEN = n.MANHANVIEN
      WHERE EXTRACT (MONTH FROM NGAYLAMVIEC ) = thang AND EXTRACT (YEAR FROM NGAYLAMVIEC ) = nam
      GROUP BY c.MANHANVIEN, LUONG;
      SELECT SUM(TRIGIA) INTO hd FROM HOADON WHERE EXTRACT (MONTH FROM NGAYHOADON ) = thang AND EXTRACT (YEAR FROM NGAYHOADON ) = nam;
      SELECT SUM(TRIGIA) INTO pn FROM PHIEUNHAP WHERE EXTRACT (MONTH FROM NGAYNHAP ) = thang AND EXTRACT (YEAR FROM NGAYNHAP ) = nam;
      loiNhuan := hd - l - pn;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('no data');
END;
/
-------------------------------------------------------------FUNCTION------------------------------------------------------------------

create or replace FUNCTION tinhGiamGia(maHD HOADON.MAHOADON%TYPE)
RETURN HOADON.TRIGIA%TYPE
IS
    tg HOADON.TRIGIA%TYPE;
    gg HOADON.TRIGIA%TYPE := 0;
    maSK HOADON.MASUKIEN%TYPE;
    pt SUKIEN.PHANTRAMGIAMGIA%TYPE;
BEGIN
    SELECT TRIGIA, MASUKIEN INTO tg, maSK FROM HOADON WHERE MAHOADON = maHD;
    IF(Length(maSK) > 0)THEN       
        SELECT PHANTRAMGIAMGIA INTO pt FROM SUKIEN WHERE MASUKIEN = maSK;
        gg := pt * tg;
    END IF;
    RETURN gg;
END;
/
create or replace FUNCTION tinhTongTien(maHD HOADON.MAHOADON%TYPE)
RETURN HOADON.TRIGIA%TYPE
IS
    tg HOADON.TRIGIA%TYPE;
    gg HOADON.TRIGIA%TYPE := 0;
BEGIN
    SELECT TRIGIA INTO tg FROM HOADON WHERE MAHOADON = maHD;
    tg := tg - tinhGiamGia(maHD);
    UPDATE HOADON SET TRIGIA = tg WHERE MAHOADON = maHD;
    RETURN tg;
END;
/
create or replace FUNCTION getThuTuHoaDon RETURN INT
AS
    tt INT;
BEGIN 
    SELECT seq_HoaDon.nextval INTO tt FROM dual;
    RETURN tt;
END;
/
create or replace FUNCTION getThuTuPhieuNhap RETURN INT
AS
    tt INT;
BEGIN 
    SELECT seq_PhieuNhap.nextval INTO tt FROM dual;
    RETURN tt;
END;
/
CREATE OR REPLACE FUNCTION getSoNgayLamViec(maNV CHAMCONG.MANHANVIEN%TYPE) RETURN INT
AS
    soNgay INT;
BEGIN
    SELECT COUNT(NGAYLAMVIEC) INTO soNgay FROM CHAMCONG WHERE EXTRACT(day FROM NGAYLAMVIEC) = EXTRACT(day FROM SYSDATE) AND MANHANVIEN = maNV GROUP BY MANHANVIEN;
    RETURN soNgay;
END;

/
create or replace FUNCTION getMaSuKien(ng HOADON.NGAYHOADON%TYPE) RETURN SUKIEN.MASUKIEN%TYPE
IS
    maSK SUKIEN.MASUKIEN%TYPE;
BEGIN
    SELECT MASUKIEN INTO maSK FROM SUKIEN WHERE ng >= NGAYBATDAU AND ng <= NGAYKETTHUC;
    RETURN maSK;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN '';
END;
/CREATE OR REPLACE FUNCTION layLaiMatKhau(tk TAIKHOAN.TENDANGNHAP%TYPE) RETURN TAIKHOAN.MATKHAU%TYPE
IS
    mk TAIKHOAN.MATKHAU%TYPE;
BEGIN
    mk := DBMS_RANDOM.STRING('a',5);
    UPDATE TAIKHOAN SET MATKHAU = mk WHERE TENDANGNHAP = tk;
    RETURN mk;
END;
/
-------------------------------------------------------------TRIGGER------------------------------------------------------------------
create or replace TRIGGER kiemTraNgaySinhKhachHang
BEFORE INSERT OR UPDATE
ON KHACHHANG
FOR EACH ROW
BEGIN
    IF(:NEW.NGAYSINH > :NEW.NGAYDANGKI)THEN
        ROLLBACK ;
    END IF;
END;
/
-------------------------------------------------------------
create or replace TRIGGER kiemTraNgaySinhNhanVien
BEFORE INSERT OR UPDATE
ON NHANVIEN
FOR EACH ROW
BEGIN
    IF(:NEW.NGAYSINH > :NEW.NGAYVAOLAM)THEN
        ROLLBACK ;
    END IF;
END;
-------------------------------------------------------------
create or replace TRIGGER kiemTraNgaySuKien
BEFORE INSERT OR UPDATE
ON SUKIEN
FOR EACH ROW
BEGIN
    IF(:NEW.NGAYKETTHUC < :NEW.NGAYBATDAU)THEN
        ROLLBACK ;
    END IF;
END;
/
-------------------------------------------------------------
create or replace TRIGGER SuaTaiKhoan
AFTER UPDATE
ON NHANVIEN
FOR EACH ROW
BEGIN
    IF(:NEW.CHUCVU LIKE 'Nhân viên bán hàng')THEN
        SuaPhanQuyenTaiKhoan(:NEW.MANHANVIEN, 'NVBH');
    ELSIF(:NEW.CHUCVU LIKE 'Quản lý')THEN
        SuaPhanQuyenTaiKhoan(:NEW.MANHANVIEN, 'QL');
    ELSE
        SuaPhanQuyenTaiKhoan(:NEW.MANHANVIEN, 'TK');
    END IF;
END;
/
-------------------------------------------------------------
create or replace TRIGGER ThemTaiKhoan
AFTER INSERT 
ON NHANVIEN
FOR EACH ROW
BEGIN
    IF(:NEW.CHUCVU LIKE 'Nhân viên bán hàng')THEN
        ThemTaiKhoan(:NEW.MANHANVIEN, 'NVBH');
    ELSIF(:NEW.CHUCVU LIKE 'Quản lý')THEN
        ThemTaiKhoan(:NEW.MANHANVIEN, 'QL');
    ELSE
        ThemTaiKhoan(:NEW.MANHANVIEN, 'TK');
    END IF;
END;
/
-------------------------------------------------------------

-------------------------------------------------------------
create or replace TRIGGER trg_KHACHHANG_deleteDoanhSo
AFTER DELETE
ON HOADON
FOR EACH ROW
BEGIN
    UPDATE KHACHHANG SET DOANHSO = DOANHSO - :OLD.TRIGIA WHERE MAKHACHHANG = :OLD.MAKHACHHANG;
END;
/
-------------------------------------------------------------
create or replace TRIGGER trg_KHACHHANG_insertDoanhSo
AFTER INSERT
ON HOADON
FOR EACH ROW
BEGIN
    UPDATE KHACHHANG SET DOANHSO = DOANHSO + :NEW.TRIGIA WHERE MAKHACHHANG = :NEW.MAKHACHHANG;
END;
/
-------------------------------------------------------------
create or replace TRIGGER trg_KHACHHANG_updateDoanhSo
AFTER UPDATE
ON HOADON
FOR EACH ROW
BEGIN
    UPDATE KHACHHANG SET DOANHSO = DOANHSO - :OLD.TRIGIA + :NEW.TRIGIA WHERE MAKHACHHANG = :NEW.MAKHACHHANG;
END;
/
-------------------------------------------------------------
create or replace TRIGGER trg_ThemSanPham_HoaDon
BEFORE DELETE
ON CHITIETHOADON
FOR EACH ROW
BEGIN
    UPDATE SANPHAM SET SANPHAM.SOLUONG = SANPHAM.SOLUONG + :OLD.SOLUONG WHERE SANPHAM.MASANPHAM = :OLD.MASANPHAM;
END;
/
-------------------------------------------------------------
create or replace TRIGGER trg_ThemSanPham_PhieuNhap
AFTER INSERT
ON CHITIETPHIEUNHAP
FOR EACH ROW
BEGIN
    UPDATE SANPHAM SET SANPHAM.SOLUONG = SANPHAM.SOLUONG + :NEW.SOLUONG WHERE SANPHAM.MASANPHAM = :NEW.MASANPHAM;
    UPDATE PHIEUNHAP SET TRIGIA = TRIGIA + (:NEW.SOLUONG * :NEW.DONGIANHAP) WHERE MAPHIEUNHAP = :NEW.MAPHIEUNHAP;
END;
/
-------------------------------------------------------------
create or replace TRIGGER trg_tinhTGiaPhieuNhap
AFTER INSERT
ON CHITIETPHIEUNHAP
FOR EACH ROW
DECLARE 
BEGIN
    UPDATE PHIEUNHAP SET TRIGIA = TRIGIA + (:NEW.SOLUONG * :NEW.DONGIANHAP) WHERE MAPHIEUNHAP = :NEW.MAPHIEUNHAP;
END;
/
-------------------------------------------------------------
create or replace TRIGGER trg_tinhTriGia
AFTER INSERT
ON CHITIETHOADON
FOR EACH ROW
DECLARE 
    dGiaLe SANPHAM.DONGIALE%TYPE;
    dGiaSi SANPHAM.DONGIASI%TYPE;
    dGia SANPHAM.DONGIASI%TYPE := 0;
BEGIN
        SELECT DONGIALE, DONGIASI INTO dGiaLe, dGiaSi FROM SANPHAM WHERE MASANPHAM = :NEW.MASANPHAM;
        IF(:NEW.SOLUONG > 10)THEN
            dGia := dGiaSi;
        ELSE
            dGia := dGiaLe;
        END IF;     
        UPDATE HOADON SET TRIGIA = TRIGIA + (:NEW.SOLUONG * dGia) WHERE MAHOADON = :NEW.MAHOADON;
END;
/
-------------------------------------------------------------
create or replace TRIGGER trg_XoaSanPham_HoaDon
AFTER INSERT
ON CHITIETHOADON
FOR EACH ROW
BEGIN
    UPDATE SANPHAM SET SANPHAM.SOLUONG = SANPHAM.SOLUONG - :NEW.SOLUONG WHERE SANPHAM.MASANPHAM = :NEW.MASANPHAM;
END;
/
-------------------------------------------------------------
create or replace TRIGGER trg_XoaSanPham_PhieuNhap
BEFORE DELETE
ON CHITIETPHIEUNHAP
FOR EACH ROW
BEGIN
    UPDATE SANPHAM SET SANPHAM.SOLUONG = SANPHAM.SOLUONG - :OLD.SOLUONG WHERE SANPHAM.MASANPHAM = :OLD.MASANPHAM;
END;
/
-------------------------------------------------------------
create or replace TRIGGER XoaTaiKhoan
BEFORE DELETE
ON NHANVIEN
FOR EACH ROW
BEGIN
    XoaTaiKhoan(:OLD.MANHANVIEN);
END;
/